{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\scott\\\\thinkful-projects\\\\Capstone-Flashcard-main\\\\Capstone-Flashcard-main\\\\src\\\\Layout\\\\card\\\\NewCard.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport Breadcrumb from \"../breadcrumb/Breadcrumb\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport { createCard, readDeck } from \"../../utils/api\";\nimport CardForm from \"./CardForm\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function NewCard() {\n  _s();\n\n  // obtains access to the browser history controls\n  const history = useHistory(); // sets the states of deck and card, card to a presupplied object\n\n  const [deck, setDeck] = useState([]);\n  const [card, setCard] = useState({\n    front: \"\",\n    back: \"\"\n  }); // grabs the deckId from the current URL (:deckId)\n\n  const {\n    deckId\n  } = useParams(); // useEffect reads the deck from the API and watches the deckId to update and rerender.\n\n  useEffect(() => {\n    const ac = new AbortController();\n\n    async function getDeck() {\n      const theDeck = await readDeck(deckId, ac.signal);\n      setDeck(theDeck);\n    }\n\n    getDeck();\n    return () => ac.abort();\n  }, [deckId]); // handles the change to the form for creating new cards.\n\n  const handleChange = _ref => {\n    let {\n      target\n    } = _ref;\n    setCard({ ...card,\n      [target.name]: target.value,\n      deckId\n    });\n  }; // handles the submit event of the form, making an API request and then redirecting.\n\n\n  const handleSubmit = async event => {\n    event.preventDefault();\n    await createCard(deckId, card);\n    history.push(`/decks/${deck.id}`);\n  }; // HTML return of CardForm and breadcrumb, using modularity.\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Breadcrumb, {\n      isNewCard: true,\n      deck: deck\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CardForm, {\n      handleChange: handleChange,\n      handleSubmit: handleSubmit,\n      card: card\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n}\n\n_s(NewCard, \"75ZURffyveUSmmP4Iy8ER0ZPdCE=\", false, function () {\n  return [useHistory, useParams];\n});\n\n_c = NewCard;\n\nvar _c;\n\n$RefreshReg$(_c, \"NewCard\");","map":{"version":3,"sources":["C:/Users/scott/thinkful-projects/Capstone-Flashcard-main/Capstone-Flashcard-main/src/Layout/card/NewCard.js"],"names":["React","useState","useEffect","Breadcrumb","useHistory","useParams","createCard","readDeck","CardForm","NewCard","history","deck","setDeck","card","setCard","front","back","deckId","ac","AbortController","getDeck","theDeck","signal","abort","handleChange","target","name","value","handleSubmit","event","preventDefault","push","id"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,UAAP,MAAuB,0BAAvB;AACA,SAASC,UAAT,EAAqBC,SAArB,QAAsC,kBAAtC;AACA,SAASC,UAAT,EAAqBC,QAArB,QAAqC,iBAArC;AACA,OAAOC,QAAP,MAAqB,YAArB;;AACA,eAAe,SAASC,OAAT,GAAmB;AAAA;;AAChC;AACA,QAAMC,OAAO,GAAGN,UAAU,EAA1B,CAFgC,CAGhC;;AACA,QAAM,CAACO,IAAD,EAAOC,OAAP,IAAkBX,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACY,IAAD,EAAOC,OAAP,IAAkBb,QAAQ,CAAC;AAACc,IAAAA,KAAK,EAAC,EAAP;AAAWC,IAAAA,IAAI,EAAC;AAAhB,GAAD,CAAhC,CALgC,CAOhC;;AACA,QAAM;AAAEC,IAAAA;AAAF,MAAaZ,SAAS,EAA5B,CARgC,CAUhC;;AACAH,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMgB,EAAE,GAAG,IAAIC,eAAJ,EAAX;;AAEA,mBAAeC,OAAf,GAAyB;AACvB,YAAMC,OAAO,GAAG,MAAMd,QAAQ,CAACU,MAAD,EAASC,EAAE,CAACI,MAAZ,CAA9B;AACAV,MAAAA,OAAO,CAACS,OAAD,CAAP;AACD;;AAEDD,IAAAA,OAAO;AACP,WAAO,MAAMF,EAAE,CAACK,KAAH,EAAb;AACD,GAVQ,EAUN,CAACN,MAAD,CAVM,CAAT,CAXgC,CAsBhC;;AACA,QAAMO,YAAY,GAAG,QAAgB;AAAA,QAAf;AAAEC,MAAAA;AAAF,KAAe;AACnCX,IAAAA,OAAO,CAAC,EACJ,GAAGD,IADC;AAEN,OAACY,MAAM,CAACC,IAAR,GAAeD,MAAM,CAACE,KAFhB;AAGNV,MAAAA;AAHM,KAAD,CAAP;AAKD,GAND,CAvBgC,CA8BhC;;;AACA,QAAMW,YAAY,GAAG,MAAOC,KAAP,IAAiB;AACpCA,IAAAA,KAAK,CAACC,cAAN;AACA,UAAMxB,UAAU,CAACW,MAAD,EAASJ,IAAT,CAAhB;AACAH,IAAAA,OAAO,CAACqB,IAAR,CAAc,UAASpB,IAAI,CAACqB,EAAG,EAA/B;AACD,GAJD,CA/BgC,CAoChC;;;AACA,sBACE;AAAA,4BACE,QAAC,UAAD;AAAY,MAAA,SAAS,EAAE,IAAvB;AAA6B,MAAA,IAAI,EAAErB;AAAnC;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,QAAD;AAAU,MAAA,YAAY,EAAEa,YAAxB;AAAsC,MAAA,YAAY,EAAEI,YAApD;AAAkE,MAAA,IAAI,EAAEf;AAAxE;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAMD;;GA3CuBJ,O;UAENL,U,EAMGC,S;;;KARGI,O","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport Breadcrumb from \"../breadcrumb/Breadcrumb\"\nimport { useHistory, useParams } from \"react-router-dom\";\nimport { createCard, readDeck } from \"../../utils/api\";\nimport CardForm from \"./CardForm\";\nexport default function NewCard() {\n  // obtains access to the browser history controls\n  const history = useHistory();\n  // sets the states of deck and card, card to a presupplied object\n  const [deck, setDeck] = useState([]);\n  const [card, setCard] = useState({front:\"\", back:\"\",});\n\n  // grabs the deckId from the current URL (:deckId)\n  const { deckId } = useParams();\n\n  // useEffect reads the deck from the API and watches the deckId to update and rerender.\n  useEffect(() => {\n    const ac = new AbortController();\n\n    async function getDeck() {\n      const theDeck = await readDeck(deckId, ac.signal);\n      setDeck(theDeck);\n    }\n\n    getDeck();\n    return () => ac.abort();\n  }, [deckId]);\n  // handles the change to the form for creating new cards.\n  const handleChange = ({ target }) => {\n    setCard({\n        ...card,\n      [target.name]: target.value,\n      deckId,\n    });\n  };\n  // handles the submit event of the form, making an API request and then redirecting.\n  const handleSubmit = async (event) => {\n    event.preventDefault();\n    await createCard(deckId, card);\n    history.push(`/decks/${deck.id}`);\n  };\n  // HTML return of CardForm and breadcrumb, using modularity.\n  return (\n    <div>\n      <Breadcrumb isNewCard={true} deck={deck} />\n      <CardForm handleChange={handleChange} handleSubmit={handleSubmit} card={card}/>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}