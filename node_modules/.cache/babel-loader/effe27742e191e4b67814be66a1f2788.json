{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\scott\\\\thinkful-projects\\\\Capstone-Flashcard-main\\\\Capstone-Flashcard-main\\\\src\\\\Layout\\\\deck\\\\DeckView.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { useParams, Link, useRouteMatch, useHistory } from \"react-router-dom\";\nimport Breadcrumb from \"../breadcrumb/Breadcrumb\";\nimport { deleteDeck, readDeck } from \"../../utils/api\";\nimport CardList from \"../card/CardList\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function DeckView() {\n  _s();\n\n  // obtains access to browser history controls\n  const history = useHistory(); // grabs the deckId in the url (:deckId)\n\n  const {\n    deckId\n  } = useParams(); // initializes state for deck\n\n  const [deck, setDeck] = useState([]); // grabs the current url for use below\n\n  const {\n    url\n  } = useRouteMatch(); // useEffect reads the deck from the API and sets the current state of the deck\n  // Watches the deckId in the URL so rerenders can happen\n\n  useEffect(() => {\n    const ac = new AbortController();\n\n    async function getDeck() {\n      const theDeck = await readDeck(deckId, ac.signal);\n      setDeck(theDeck);\n    }\n\n    getDeck();\n    return () => ac.abort();\n  }, [deckId]); // delete handler for deck deletion then redirects\n\n  const deleteHandler = async () => {\n    const resp = window.confirm(\"Are you sure you want to delete this deck?\");\n\n    if (resp) {\n      deleteDeck(deckId);\n      history.push(\"/\");\n    }\n  }; // main HTML return of Cards\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"deck-view\",\n    children: [/*#__PURE__*/_jsxDEV(Breadcrumb, {\n      deck: deck,\n      isViewing: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: deck.name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: deck.description\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Link, {\n      to: `${url}/edit`,\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-secondary\",\n        children: \"Edit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 32\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Link, {\n      to: `${url}/study`,\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-primary\",\n        children: \"Study\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 33\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Link, {\n      to: `${url}/cards/new`,\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-primary\",\n        children: \"Add Cards\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 37\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"btn btn-danger\",\n      onClick: deleteHandler,\n      children: \"Delete\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"card-view\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Cards\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: /*#__PURE__*/_jsxDEV(CardList, {\n          cards: deck.cards\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n}\n\n_s(DeckView, \"BczkNaPCTQ7fIbMnFv2Z9LvE1RQ=\", false, function () {\n  return [useHistory, useParams, useRouteMatch];\n});\n\n_c = DeckView;\n\nvar _c;\n\n$RefreshReg$(_c, \"DeckView\");","map":{"version":3,"sources":["C:/Users/scott/thinkful-projects/Capstone-Flashcard-main/Capstone-Flashcard-main/src/Layout/deck/DeckView.js"],"names":["React","useState","useEffect","useParams","Link","useRouteMatch","useHistory","Breadcrumb","deleteDeck","readDeck","CardList","DeckView","history","deckId","deck","setDeck","url","ac","AbortController","getDeck","theDeck","signal","abort","deleteHandler","resp","window","confirm","push","name","description","cards"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { useParams, Link, useRouteMatch, useHistory } from \"react-router-dom\";\nimport Breadcrumb from \"../breadcrumb/Breadcrumb\";\nimport { deleteDeck, readDeck } from \"../../utils/api\";\nimport CardList from \"../card/CardList\";\n\nexport default function DeckView() {\n  // obtains access to browser history controls\n  const history = useHistory();\n  // grabs the deckId in the url (:deckId)\n  const { deckId } = useParams();\n  // initializes state for deck\n  const [deck, setDeck] = useState([]);\n  // grabs the current url for use below\n  const {url} = useRouteMatch();\n  \n  // useEffect reads the deck from the API and sets the current state of the deck\n  // Watches the deckId in the URL so rerenders can happen\n  useEffect(() => {\n    const ac = new AbortController();\n\n    async function getDeck() {\n      const theDeck = await readDeck(deckId, ac.signal);\n      setDeck(theDeck);\n    }\n\n    getDeck();\n    return () => ac.abort();\n  },[deckId]);\n\n  // delete handler for deck deletion then redirects\n  const deleteHandler = async () => {\n    const resp = window.confirm(\"Are you sure you want to delete this deck?\");\n    if(resp){\n      deleteDeck(deckId);\n      history.push(\"/\")\n    }\n    \n  }\n\n  // main HTML return of Cards\n  return (\n    <div id={\"deck-view\"}>\n      <Breadcrumb deck={deck} isViewing={true} />\n      <h3>{deck.name}</h3>\n      <p>{deck.description}</p>\n      <Link to={`${url}/edit`}><button className=\"btn btn-secondary\">Edit</button></Link>\n      <Link to={`${url}/study`}><button className=\"btn btn-primary\">Study</button></Link>\n      <Link to={`${url}/cards/new`}><button className=\"btn btn-primary\">Add Cards</button></Link>\n      <button className=\"btn btn-danger\" onClick={deleteHandler}>Delete</button>\n\n      <div id={\"card-view\"}>\n        <h2>Cards</h2>\n        <ul>\n          <CardList cards={deck.cards}/>\n        </ul>\n      </div>\n\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}