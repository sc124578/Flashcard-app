{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\scott\\\\thinkful-projects\\\\Capstone-Flashcard-main\\\\Capstone-Flashcard-main\\\\src\\\\Layout\\\\deck\\\\StudyDeck.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { useParams, useHistory, Link } from \"react-router-dom\";\nimport { readDeck } from \"../../utils/api\";\nimport Breadcrumb from \"../breadcrumb/Breadcrumb\";\nimport StudyCard from \"../card/StudyCard\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function StudyDeck() {\n  _s();\n\n  // obtains access to browser history controls\n  const history = useHistory(); // grabs the deckId from the URL (:deckId)\n\n  const {\n    deckId\n  } = useParams(); // sets the states of deck, card, isFlipped, deckLength, and currentPosition\n\n  const [deck, setDeck] = useState([]);\n  const [card, setCard] = useState({});\n  const [isFlipped, setIsFlipped] = useState(false);\n  const [deckLength, setDeckLength] = useState(0);\n  const [currentPos, setCurrentPos] = useState(1); // useEffect sets all necessary states of the deck, card, length and flipped after reading the deck from API\n  // also watches the deckId in the URL to update according to any changes\n\n  useEffect(() => {\n    const ac = new AbortController();\n\n    async function getDeck() {\n      const _deck = await readDeck(deckId, ac.signal);\n\n      setDeck(_deck);\n      setCard(_deck.cards[0]);\n      setDeckLength(_deck.cards.length);\n      setIsFlipped(false);\n    }\n\n    getDeck();\n    return () => ac.abort();\n  }, [deckId]); // flip handler handles flips of the card\n\n  const flipHandler = () => {\n    setIsFlipped(!isFlipped);\n  }; // nextCardHandler sets the current position of the cards, sets the state of currentPos, isFlipped, card. \n  // Also redirects home if selected\n\n\n  const nextCardHandler = () => {\n    setCurrentPos(currentPos + 1);\n    setIsFlipped(!isFlipped);\n\n    if (currentPos !== deck.cards.length) {\n      setCard(deck.cards[currentPos]);\n    } else {\n      const resp = window.confirm(\"Restart cards? Click 'cancel' to return to the home page\");\n\n      if (!resp) {\n        history.push(\"/\");\n      } else {\n        setCard(deck.cards[1]);\n        setCurrentPos(1);\n        setIsFlipped(false);\n      }\n    }\n  }; // HTML return and handles if there are not enough cards in the deck to study\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Breadcrumb, {\n      deck: deck,\n      isStudying: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [deck.name, \": Study\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"cards\",\n      children: [deckLength > 2 && /*#__PURE__*/_jsxDEV(StudyCard, {\n        isFlipped: isFlipped,\n        flipHandler: flipHandler,\n        card: card,\n        length: deckLength,\n        currentPos: currentPos,\n        nextCardHandler: nextCardHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 36\n      }, this), deckLength < 3 && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Not enough cards.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"You need at least 3 cards to study. There are \", deckLength, \" cards in this deck\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Link, {\n          to: `/decks/${deckId}/cards/new`,\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn btn-primary\",\n            children: \"Add Cards\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 65\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 9\n  }, this);\n}\n\n_s(StudyDeck, \"7mn12Uhf5MGpLMDKIHDEIiuZwFY=\", false, function () {\n  return [useHistory, useParams];\n});\n\n_c = StudyDeck;\n\nvar _c;\n\n$RefreshReg$(_c, \"StudyDeck\");","map":{"version":3,"sources":["C:/Users/scott/thinkful-projects/Capstone-Flashcard-main/Capstone-Flashcard-main/src/Layout/deck/StudyDeck.js"],"names":["React","useState","useEffect","useParams","useHistory","Link","readDeck","Breadcrumb","StudyCard","StudyDeck","history","deckId","deck","setDeck","card","setCard","isFlipped","setIsFlipped","deckLength","setDeckLength","currentPos","setCurrentPos","ac","AbortController","getDeck","_deck","signal","cards","length","abort","flipHandler","nextCardHandler","resp","window","confirm","push","name"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAAyC,OAAzC;AACA,SAASC,SAAT,EAAoBC,UAApB,EAAgCC,IAAhC,QAA4C,kBAA5C;AACA,SAASC,QAAT,QAAyB,iBAAzB;AACA,OAAOC,UAAP,MAAuB,0BAAvB;AACA,OAAOC,SAAP,MAAsB,mBAAtB;;AAGA,eAAe,SAASC,SAAT,GAAoB;AAAA;;AAC/B;AACA,QAAMC,OAAO,GAAGN,UAAU,EAA1B,CAF+B,CAG/B;;AACA,QAAM;AAAEO,IAAAA;AAAF,MAAaR,SAAS,EAA5B,CAJ+B,CAK/B;;AACA,QAAM,CAACS,IAAD,EAAOC,OAAP,IAAkBZ,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACa,IAAD,EAAOC,OAAP,IAAkBd,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACe,SAAD,EAAYC,YAAZ,IAA4BhB,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM,CAACiB,UAAD,EAAaC,aAAb,IAA8BlB,QAAQ,CAAC,CAAD,CAA5C;AACA,QAAM,CAACmB,UAAD,EAAaC,aAAb,IAA8BpB,QAAQ,CAAC,CAAD,CAA5C,CAV+B,CAY/B;AACA;;AACAC,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMoB,EAAE,GAAG,IAAIC,eAAJ,EAAX;;AAEA,mBAAeC,OAAf,GAAwB;AAEpB,YAAMC,KAAK,GAAG,MAAMnB,QAAQ,CAACK,MAAD,EAASW,EAAE,CAACI,MAAZ,CAA5B;;AACAb,MAAAA,OAAO,CAACY,KAAD,CAAP;AACAV,MAAAA,OAAO,CAACU,KAAK,CAACE,KAAN,CAAY,CAAZ,CAAD,CAAP;AACAR,MAAAA,aAAa,CAACM,KAAK,CAACE,KAAN,CAAYC,MAAb,CAAb;AACAX,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACH;;AACDO,IAAAA,OAAO;AAEP,WAAO,MAAMF,EAAE,CAACO,KAAH,EAAb;AACH,GAdQ,EAcN,CAAClB,MAAD,CAdM,CAAT,CAd+B,CA6B/B;;AACA,QAAMmB,WAAW,GAAG,MAAK;AACrBb,IAAAA,YAAY,CAAC,CAACD,SAAF,CAAZ;AACH,GAFD,CA9B+B,CAiC/B;AACA;;;AACA,QAAMe,eAAe,GAAG,MAAK;AACzBV,IAAAA,aAAa,CAACD,UAAU,GAAG,CAAd,CAAb;AACAH,IAAAA,YAAY,CAAC,CAACD,SAAF,CAAZ;;AACA,QAAGI,UAAU,KAAKR,IAAI,CAACe,KAAL,CAAWC,MAA7B,EAAoC;AAChCb,MAAAA,OAAO,CAACH,IAAI,CAACe,KAAL,CAAWP,UAAX,CAAD,CAAP;AACH,KAFD,MAGI;AACA,YAAMY,IAAI,GAAGC,MAAM,CAACC,OAAP,CAAe,0DAAf,CAAb;;AACA,UAAI,CAACF,IAAL,EAAU;AACNtB,QAAAA,OAAO,CAACyB,IAAR,CAAa,GAAb;AACH,OAFD,MAEK;AACDpB,QAAAA,OAAO,CAACH,IAAI,CAACe,KAAL,CAAW,CAAX,CAAD,CAAP;AACAN,QAAAA,aAAa,CAAC,CAAD,CAAb;AACAJ,QAAAA,YAAY,CAAC,KAAD,CAAZ;AACH;AACJ;AAGJ,GAlBD,CAnC+B,CAuD/B;;;AACA,sBACI;AAAA,4BACI,QAAC,UAAD;AAAY,MAAA,IAAI,EAAEL,IAAlB;AAAwB,MAAA,UAAU,EAAE;AAApC;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI;AAAA,iBAAKA,IAAI,CAACwB,IAAV;AAAA;AAAA;AAAA;AAAA;AAAA,YAFJ,eAGI;AAAK,MAAA,SAAS,EAAC,OAAf;AAAA,iBACKlB,UAAU,GAAG,CAAb,iBAAkB,QAAC,SAAD;AAAW,QAAA,SAAS,EAAEF,SAAtB;AAAiC,QAAA,WAAW,EAAEc,WAA9C;AAA2D,QAAA,IAAI,EAAEhB,IAAjE;AAAuE,QAAA,MAAM,EAAEI,UAA/E;AAA2F,QAAA,UAAU,EAAEE,UAAvG;AAAmH,QAAA,eAAe,EAAEW;AAApI;AAAA;AAAA;AAAA;AAAA,cADvB,EAEKb,UAAU,GAAG,CAAb,iBACG;AAAA,gCACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI;AAAA,uEAAkDA,UAAlD;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFJ,eAGI,QAAC,IAAD;AAAM,UAAA,EAAE,EAAG,UAASP,MAAO,YAA3B;AAAA,iCAAwC;AAAQ,YAAA,SAAS,EAAC,iBAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAxC;AAAA;AAAA;AAAA;AAAA,gBAHJ;AAAA;AAAA;AAAA;AAAA;AAAA,cAHR;AAAA;AAAA;AAAA;AAAA;AAAA,YAHJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAgBH;;GAxEuBF,S;UAEJL,U,EAEGD,S;;;KAJCM,S","sourcesContent":["import React, {useState, useEffect} from \"react\";\nimport { useParams, useHistory, Link } from \"react-router-dom\";\nimport { readDeck } from \"../../utils/api\";\nimport Breadcrumb from \"../breadcrumb/Breadcrumb\";\nimport StudyCard from \"../card/StudyCard\";\n\n\nexport default function StudyDeck(){\n    // obtains access to browser history controls\n    const history = useHistory();\n    // grabs the deckId from the URL (:deckId)\n    const { deckId } = useParams();\n    // sets the states of deck, card, isFlipped, deckLength, and currentPosition\n    const [deck, setDeck] = useState([]);\n    const [card, setCard] = useState({})\n    const [isFlipped, setIsFlipped] = useState(false);\n    const [deckLength, setDeckLength] = useState(0);\n    const [currentPos, setCurrentPos] = useState(1);\n    \n    // useEffect sets all necessary states of the deck, card, length and flipped after reading the deck from API\n    // also watches the deckId in the URL to update according to any changes\n    useEffect(() => {\n        const ac = new AbortController();\n\n        async function getDeck(){\n            \n            const _deck = await readDeck(deckId, ac.signal)\n            setDeck(_deck);\n            setCard(_deck.cards[0])\n            setDeckLength(_deck.cards.length)\n            setIsFlipped(false);\n        } \n        getDeck();\n        \n        return () => ac.abort();\n    }, [deckId])\n    // flip handler handles flips of the card\n    const flipHandler = () =>{\n        setIsFlipped(!isFlipped)\n    }\n    // nextCardHandler sets the current position of the cards, sets the state of currentPos, isFlipped, card. \n    // Also redirects home if selected\n    const nextCardHandler = () =>{\n        setCurrentPos(currentPos + 1)\n        setIsFlipped(!isFlipped)\n        if(currentPos !== deck.cards.length){\n            setCard(deck.cards[currentPos])\n        }\n        else{\n            const resp = window.confirm(\"Restart cards? Click 'cancel' to return to the home page\");\n            if (!resp){\n                history.push(\"/\");\n            }else{\n                setCard(deck.cards[1])\n                setCurrentPos(1);\n                setIsFlipped(false);\n            }\n        }\n        \n        \n    }\n\n    // HTML return and handles if there are not enough cards in the deck to study\n    return(\n        <div>\n            <Breadcrumb deck={deck} isStudying={true}/>\n            <h1>{deck.name}: Study</h1>\n            <div className=\"cards\">\n                {deckLength > 2 &&(<StudyCard isFlipped={isFlipped} flipHandler={flipHandler} card={card} length={deckLength} currentPos={currentPos} nextCardHandler={nextCardHandler}/>)}\n                {deckLength < 3 &&(\n                    <div>\n                        <h2>Not enough cards.</h2>\n                        <p>You need at least 3 cards to study. There are {deckLength} cards in this deck</p>\n                        <Link to={`/decks/${deckId}/cards/new`}><button className=\"btn btn-primary\">Add Cards</button></Link>\n                    </div>\n                )}\n            </div>\n        </div>\n    )\n}"]},"metadata":{},"sourceType":"module"}