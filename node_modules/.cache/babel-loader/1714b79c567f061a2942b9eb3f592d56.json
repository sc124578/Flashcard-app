{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\scott\\\\thinkful-projects\\\\Capstone-Flashcard-main\\\\Capstone-Flashcard-main\\\\src\\\\Layout\\\\card\\\\EditCard.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport Breadcrumb from \"../breadcrumb/Breadcrumb\";\nimport { useParams, useHistory } from \"react-router-dom\";\nimport { readCard, readDeck, updateCard } from \"../../utils/api\";\nimport CardForm from \"./CardForm\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function EditCard() {\n  _s();\n\n  // obtains control of the browser history controls.\n  const history = useHistory(); // obtains the deckId and cardId from the url (:deckId, :cardId)\n\n  const {\n    deckId,\n    cardId\n  } = useParams(); // sets the states of the card and deck variables\n\n  const [deck, setDeck] = useState([]);\n  const [card, setCard] = useState({}); // useEffect gets the card and the deck and sets the states\n  // also watches the id's in the URL and rerenders accordingly. prevents inifite loop\n\n  useEffect(() => {\n    const ac = new AbortController();\n\n    async function getDeck() {\n      const theDeck = await readDeck(deckId, ac.signal);\n      setDeck(theDeck);\n    }\n\n    async function getCard() {\n      const theCard = await readCard(cardId, ac.signal);\n      setCard(theCard);\n    }\n\n    getCard();\n    getDeck();\n    return () => ac.abort();\n  }, [deckId, cardId]); // handles any change to the edit\n\n  const handleChange = _ref => {\n    let {\n      target\n    } = _ref;\n    setCard({ ...card,\n      [target.name]: target.value\n    });\n  }; // handles the submit of the cardform and redirects to the deckId deck page.\n\n\n  const handleSubmit = async event => {\n    event.preventDefault();\n    await updateCard(card);\n    history.push(`/decks/${deck.id}`);\n  }; // HTML return that displays the breadcrumb and card form component.\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Breadcrumb, {\n      isEditingCard: true,\n      deck: deck,\n      cardId: cardId\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Edit Card\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CardForm, {\n      handleChange: handleChange,\n      handleSubmit: handleSubmit,\n      card: card\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n}\n\n_s(EditCard, \"RC6TxJYQPFqnJ06DRiPs6zv30HA=\", false, function () {\n  return [useHistory, useParams];\n});\n\n_c = EditCard;\n\nvar _c;\n\n$RefreshReg$(_c, \"EditCard\");","map":{"version":3,"sources":["C:/Users/scott/thinkful-projects/Capstone-Flashcard-main/Capstone-Flashcard-main/src/Layout/card/EditCard.js"],"names":["React","useEffect","useState","Breadcrumb","useParams","useHistory","readCard","readDeck","updateCard","CardForm","EditCard","history","deckId","cardId","deck","setDeck","card","setCard","ac","AbortController","getDeck","theDeck","signal","getCard","theCard","abort","handleChange","target","name","value","handleSubmit","event","preventDefault","push","id"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,UAAP,MAAuB,0BAAvB;AACA,SAASC,SAAT,EAAoBC,UAApB,QAAsC,kBAAtC;AACA,SAASC,QAAT,EAAmBC,QAAnB,EAA6BC,UAA7B,QAA+C,iBAA/C;AACA,OAAOC,QAAP,MAAqB,YAArB;;AAEA,eAAe,SAASC,QAAT,GAAoB;AAAA;;AAEjC;AACA,QAAMC,OAAO,GAAGN,UAAU,EAA1B,CAHiC,CAIjC;;AACA,QAAM;AAAEO,IAAAA,MAAF;AAAUC,IAAAA;AAAV,MAAqBT,SAAS,EAApC,CALiC,CAOjC;;AACA,QAAM,CAACU,IAAD,EAAOC,OAAP,IAAkBb,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACc,IAAD,EAAOC,OAAP,IAAkBf,QAAQ,CAAC,EAAD,CAAhC,CATiC,CAWjC;AACA;;AACAD,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMiB,EAAE,GAAG,IAAIC,eAAJ,EAAX;;AAEA,mBAAeC,OAAf,GAAyB;AACvB,YAAMC,OAAO,GAAG,MAAMd,QAAQ,CAACK,MAAD,EAASM,EAAE,CAACI,MAAZ,CAA9B;AACAP,MAAAA,OAAO,CAACM,OAAD,CAAP;AACD;;AACD,mBAAeE,OAAf,GAAyB;AACvB,YAAMC,OAAO,GAAG,MAAMlB,QAAQ,CAACO,MAAD,EAASK,EAAE,CAACI,MAAZ,CAA9B;AACAL,MAAAA,OAAO,CAACO,OAAD,CAAP;AACD;;AACDD,IAAAA,OAAO;AACPH,IAAAA,OAAO;AAEP,WAAO,MAAMF,EAAE,CAACO,KAAH,EAAb;AACD,GAfQ,EAeN,CAACb,MAAD,EAASC,MAAT,CAfM,CAAT,CAbiC,CA8BjC;;AACA,QAAMa,YAAY,GAAG,QAAgB;AAAA,QAAf;AAAEC,MAAAA;AAAF,KAAe;AACnCV,IAAAA,OAAO,CAAC,EACN,GAAGD,IADG;AAEN,OAACW,MAAM,CAACC,IAAR,GAAeD,MAAM,CAACE;AAFhB,KAAD,CAAP;AAID,GALD,CA/BiC,CAsCjC;;;AACA,QAAMC,YAAY,GAAG,MAAOC,KAAP,IAAiB;AACpCA,IAAAA,KAAK,CAACC,cAAN;AACA,UAAMxB,UAAU,CAACQ,IAAD,CAAhB;AACAL,IAAAA,OAAO,CAACsB,IAAR,CAAc,UAASnB,IAAI,CAACoB,EAAG,EAA/B;AACD,GAJD,CAvCiC,CA6CjC;;;AACA,sBACE;AAAA,4BACE,QAAC,UAAD;AAAY,MAAA,aAAa,EAAE,IAA3B;AAAiC,MAAA,IAAI,EAAEpB,IAAvC;AAA6C,MAAA,MAAM,EAAED;AAArD;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF,eAGE,QAAC,QAAD;AACE,MAAA,YAAY,EAAEa,YADhB;AAEE,MAAA,YAAY,EAAEI,YAFhB;AAGE,MAAA,IAAI,EAAEd;AAHR;AAAA;AAAA;AAAA;AAAA,YAHF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAWD;;GAzDuBN,Q;UAGNL,U,EAEWD,S;;;KALLM,Q","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport Breadcrumb from \"../breadcrumb/Breadcrumb\"\nimport { useParams, useHistory } from \"react-router-dom\";\nimport { readCard, readDeck, updateCard } from \"../../utils/api\";\nimport CardForm from \"./CardForm\";\n\nexport default function EditCard() {\n\n  // obtains control of the browser history controls.\n  const history = useHistory();\n  // obtains the deckId and cardId from the url (:deckId, :cardId)\n  const { deckId, cardId } = useParams();\n\n  // sets the states of the card and deck variables\n  const [deck, setDeck] = useState([]);\n  const [card, setCard] = useState({});\n\n  // useEffect gets the card and the deck and sets the states\n  // also watches the id's in the URL and rerenders accordingly. prevents inifite loop\n  useEffect(() => {\n    const ac = new AbortController();\n\n    async function getDeck() {\n      const theDeck = await readDeck(deckId, ac.signal);\n      setDeck(theDeck);\n    }\n    async function getCard() {\n      const theCard = await readCard(cardId, ac.signal);\n      setCard(theCard);\n    }\n    getCard();\n    getDeck();\n\n    return () => ac.abort();\n  }, [deckId, cardId]);\n\n  // handles any change to the edit\n  const handleChange = ({ target }) => {\n    setCard({\n      ...card,\n      [target.name]: target.value,\n    });\n  };\n\n  // handles the submit of the cardform and redirects to the deckId deck page.\n  const handleSubmit = async (event) => {\n    event.preventDefault();\n    await updateCard(card);\n    history.push(`/decks/${deck.id}`);\n  };\n  \n  // HTML return that displays the breadcrumb and card form component.\n  return (\n    <div>\n      <Breadcrumb isEditingCard={true} deck={deck} cardId={cardId} />\n      <h3>Edit Card</h3>\n      <CardForm\n        handleChange={handleChange}\n        handleSubmit={handleSubmit}\n        card={card}\n      />\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}