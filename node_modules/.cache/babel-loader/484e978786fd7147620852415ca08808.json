{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\scott\\\\thinkful-projects\\\\Capstone-Flashcard-main\\\\Capstone-Flashcard-main\\\\src\\\\Layout\\\\deck\\\\EditDeck.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { useHistory } from \"react-router-dom/cjs/react-router-dom.min\";\nimport { updateDeck, readDeck } from \"../../utils/api\";\nimport Breadcrumb from \"../breadcrumb/Breadcrumb\";\nimport DeckForm from \"./DeckForm\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function EditDeck() {\n  _s();\n\n  // sets the initial form state\n  const initialFormState = {\n    name: \"\",\n    description: \"\"\n  }; // obtains access to browser history controls\n\n  const history = useHistory(); // sets the state of the current deck to the initial form state\n  // which can be updated below\n\n  const [deck, setDeck] = useState(initialFormState); // grabs the deckId from the URL (:deckId)\n\n  const {\n    deckId\n  } = useParams(); // handles all changes to the decks name and description\n\n  const handleChange = _ref => {\n    let {\n      target\n    } = _ref;\n    setDeck({ ...deck,\n      [target.name]: target.value\n    });\n  }; // handles the submit event from clicking submit, then redirects back to the deck page\n\n\n  const handleSubmit = async event => {\n    event.preventDefault();\n    await updateDeck(deck);\n    history.push(`/decks/${deck.id}`);\n  }; // useEffect that grabs the deck from the API corresponding to the deckId in the URL (:deckId)\n\n\n  useEffect(() => {\n    const ac = new AbortController();\n\n    async function getDeck() {\n      const theDeck = await readDeck(deckId, ac.signal);\n      setDeck(theDeck);\n    }\n\n    getDeck();\n    return () => ac.abort();\n  }, [deckId]); // HTML return that contains the form for the deck\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Breadcrumb, {\n      deck: deck,\n      isEditingDeck: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Edit Deck\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DeckForm, {\n      formData: deck,\n      handleChange: handleChange,\n      handleSubmit: handleSubmit\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this);\n}\n\n_s(EditDeck, \"tIMw1aEd3Peex63fCY5Rae2zQew=\", false, function () {\n  return [useHistory, useParams];\n});\n\n_c = EditDeck;\n\nvar _c;\n\n$RefreshReg$(_c, \"EditDeck\");","map":{"version":3,"sources":["C:/Users/scott/thinkful-projects/Capstone-Flashcard-main/Capstone-Flashcard-main/src/Layout/deck/EditDeck.js"],"names":["React","useEffect","useState","useParams","useHistory","updateDeck","readDeck","Breadcrumb","DeckForm","EditDeck","initialFormState","name","description","history","deck","setDeck","deckId","handleChange","target","value","handleSubmit","event","preventDefault","push","id","ac","AbortController","getDeck","theDeck","signal","abort"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,SAAT,QAA0B,kBAA1B;AACA,SAASC,UAAT,QAA2B,2CAA3B;AACA,SAASC,UAAT,EAAqBC,QAArB,QAAqC,iBAArC;AACA,OAAOC,UAAP,MAAuB,0BAAvB;AACA,OAAOC,QAAP,MAAqB,YAArB;;AAEA,eAAe,SAASC,QAAT,GAAoB;AAAA;;AACjC;AACA,QAAMC,gBAAgB,GAAG;AACvBC,IAAAA,IAAI,EAAE,EADiB;AAEvBC,IAAAA,WAAW,EAAE;AAFU,GAAzB,CAFiC,CAMjC;;AACA,QAAMC,OAAO,GAAGT,UAAU,EAA1B,CAPiC,CAQjC;AACA;;AACA,QAAM,CAACU,IAAD,EAAOC,OAAP,IAAkBb,QAAQ,CAACQ,gBAAD,CAAhC,CAViC,CAWjC;;AACA,QAAM;AAAEM,IAAAA;AAAF,MAAab,SAAS,EAA5B,CAZiC,CAiBjC;;AACA,QAAMc,YAAY,GAAG,QAAgB;AAAA,QAAf;AAAEC,MAAAA;AAAF,KAAe;AACnCH,IAAAA,OAAO,CAAC,EACN,GAAGD,IADG;AAEN,OAACI,MAAM,CAACP,IAAR,GAAeO,MAAM,CAACC;AAFhB,KAAD,CAAP;AAID,GALD,CAlBiC,CAwBjC;;;AACA,QAAMC,YAAY,GAAG,MAAOC,KAAP,IAAiB;AACpCA,IAAAA,KAAK,CAACC,cAAN;AACA,UAAMjB,UAAU,CAACS,IAAD,CAAhB;AACAD,IAAAA,OAAO,CAACU,IAAR,CAAc,UAAST,IAAI,CAACU,EAAG,EAA/B;AACD,GAJD,CAzBiC,CA8BjC;;;AACAvB,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMwB,EAAE,GAAG,IAAIC,eAAJ,EAAX;;AAEA,mBAAeC,OAAf,GAAyB;AACvB,YAAMC,OAAO,GAAG,MAAMtB,QAAQ,CAACU,MAAD,EAASS,EAAE,CAACI,MAAZ,CAA9B;AACAd,MAAAA,OAAO,CAACa,OAAD,CAAP;AACD;;AAEDD,IAAAA,OAAO;AACP,WAAO,MAAMF,EAAE,CAACK,KAAH,EAAb;AACD,GAVQ,EAUN,CAACd,MAAD,CAVM,CAAT,CA/BiC,CA0CjC;;AACA,sBACE;AAAA,4BACE,QAAC,UAAD;AAAY,MAAA,IAAI,EAAEF,IAAlB;AAAwB,MAAA,aAAa,EAAE;AAAvC;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF,eAGE,QAAC,QAAD;AACE,MAAA,QAAQ,EAAEA,IADZ;AAEE,MAAA,YAAY,EAAEG,YAFhB;AAGE,MAAA,YAAY,EAAEG;AAHhB;AAAA;AAAA;AAAA;AAAA,YAHF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAWD;;GAtDuBX,Q;UAONL,U,EAKGD,S;;;KAZGM,Q","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { useHistory } from \"react-router-dom/cjs/react-router-dom.min\";\nimport { updateDeck, readDeck } from \"../../utils/api\";\nimport Breadcrumb from \"../breadcrumb/Breadcrumb\";\nimport DeckForm from \"./DeckForm\";\n\nexport default function EditDeck() {\n  // sets the initial form state\n  const initialFormState = {\n    name: \"\",\n    description: \"\",\n  };\n  // obtains access to browser history controls\n  const history = useHistory();\n  // sets the state of the current deck to the initial form state\n  // which can be updated below\n  const [deck, setDeck] = useState(initialFormState);\n  // grabs the deckId from the URL (:deckId)\n  const { deckId } = useParams();\n\n\n  \n\n  // handles all changes to the decks name and description\n  const handleChange = ({ target }) => {\n    setDeck({\n      ...deck,\n      [target.name]: target.value,\n    });\n  };\n  // handles the submit event from clicking submit, then redirects back to the deck page\n  const handleSubmit = async (event) => {\n    event.preventDefault();\n    await updateDeck(deck);\n    history.push(`/decks/${deck.id}`);\n  };\n  // useEffect that grabs the deck from the API corresponding to the deckId in the URL (:deckId)\n  useEffect(() => {\n    const ac = new AbortController();\n\n    async function getDeck() {\n      const theDeck = await readDeck(deckId, ac.signal);\n      setDeck(theDeck);\n    }\n\n    getDeck();\n    return () => ac.abort();\n  }, [deckId]);\n  // HTML return that contains the form for the deck\n  return (\n    <div>\n      <Breadcrumb deck={deck} isEditingDeck={true} />\n      <h1>Edit Deck</h1>\n      <DeckForm\n        formData={deck}\n        handleChange={handleChange}\n        handleSubmit={handleSubmit}\n      />\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}